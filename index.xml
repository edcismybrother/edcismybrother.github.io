<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>皮智文的小宝库</title>
    <link>http://edcismybrother.github.io/</link>
    <description>Recent content on 皮智文的小宝库</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <lastBuildDate>Mon, 15 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://edcismybrother.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ssh连接</title>
      <link>http://edcismybrother.github.io/ssh/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/ssh/</guid>
      <description>ssh连接服务器 ssh name@host // 如果默认端口不是22，则需要在连接的时候带上参数-P ssh -P 2222 name@host  ssh上传文件以及下载文件 // 从本地上传文件 scp localPath/file name@host:/home/src // 意思是将本地路径localPath下的file文件上传到服务器的home/src文件夹下 // 从服务器下载文件 scp name@host:/home/src/file localPath // 意思是将服务器home/src路径下的file文件下载到本地localPath路径下  以上只适合linux系统，如果window想要使用，有两种办法  使用git bash，git bash可以使用ssh以及scp命令 下载pscp，pscp是window下操作的命令，替换scp可以进行相同操作,pscp需要添加到环境变量  pscp下载路径</description>
    </item>
    
    <item>
      <title>干货达人网址链接</title>
      <link>http://edcismybrother.github.io/%E5%B9%B2%E8%B4%A7/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/%E5%B9%B2%E8%B4%A7/</guid>
      <description>GitHub上优秀的Go开源项目
awesome优秀框架分享（英文版）
awesome优秀框架分享（中文版）
github上优秀的储存框架</description>
    </item>
    
    <item>
      <title>golang标准包分析---bytes</title>
      <link>http://edcismybrother.github.io/bytes/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/bytes/</guid>
      <description>bytes包对外提供的函数  这里将函数分为两类，一类是汇编（这种只需要明白用法就行），一类是使用代码实现的（这种需要好好学习）
 // Index returns the index of the first instance of sep in s, or -1 if sep is not present in s. func Index(s, sep []byte) int {```} 这个函数内部的核心函数是bytealg.Index()，此函数属于汇编类型，用处就是返回首个存在于s中的sep实例的索引，如果不存在返回-1 // Compare returns an integer comparing two byte slices lexicographically. // The result will be 0 if a==b, -1 if a &amp;lt; b, and +1 if a &amp;gt; b. // A nil argument is equivalent to an empty slice.</description>
    </item>
    
    <item>
      <title>golang标准包分析---archive</title>
      <link>http://edcismybrother.github.io/archive/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/archive/</guid>
      <description>zip 使用方法 写
// 写到文件中 src,err := os.Create(&amp;quot;/name.zip&amp;quot;) if err != nil{ return } w := zip.NewWriter(src) // 给写入的文件写名字,Create()函数，默认的压缩方式是deflate，需要选择压缩方式可以用CreateHeader() // Store uint16 = 0 // no compression // Deflate uint16 = 8 // DEFLATE compressed f,err := w.Create(&amp;quot;name&amp;quot;) if err != nil{ return } //将内容写入相应的文件中,data是二进制字节流 _,err:=f.write(data) if err != nil { return } // 写完后，需要注意关闭w w.Close() err := w.Close() if err != nil { log.Fatal(err) }  读(常用就是解压缩)
// OpenReader 打开要读取的zip,path:zip文件路径 rc ,err := zip.</description>
    </item>
    
    <item>
      <title>占位符</title>
      <link>http://edcismybrother.github.io/%E5%8D%A0%E4%BD%8D%E7%AC%A6/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/%E5%8D%A0%E4%BD%8D%E7%AC%A6/</guid>
      <description>普通占位符 占位符 说明 举例 输出 %v 相应值的默认格式。 Printf(&amp;quot;%v&amp;quot;, people) {zhangsan}， %+v 打印结构体时，会添加字段名 Printf(&amp;quot;%+v&amp;quot;, people) {Name:zhangsan} %#v 相应值的Go语法表示 Printf(&amp;quot;#v&amp;quot;, people) main.Human{Name:&amp;quot;zhangsan&amp;quot;} %T 相应值的类型的Go语法表示 Printf(&amp;quot;%T&amp;quot;, people) main.Human %% 字面上的百分号，并非值的占位符 Printf(&amp;quot;%%&amp;quot;) %  布尔占位符 占位符 说明 举例 输出 %t true 或 false。 Printf(&amp;quot;%t&amp;quot;, true) true  整数占位符 占位符 说明 举例 输出 %b 二进制表示 Printf(&amp;quot;%b&amp;quot;, 5) 101 %c 相应Unicode码点所表示的字符 Printf(&amp;quot;%c&amp;quot;, 0x4E2D) 中 %d 十进制表示 Printf(&amp;quot;%d&amp;quot;, 0x12) 18 %o 八进制表示 Printf(&amp;quot;%d&amp;quot;, 10) 12 %q 单引号围绕的字符字面值，由Go语法安全地转义 Printf(&amp;quot;%q&amp;quot;, 0x4E2D) &#39;中&#39; %x 十六进制表示，字母形式为小写 a-f Printf(&amp;quot;%x&amp;quot;, 13) d %X 十六进制表示，字母形式为大写 A-F Printf(&amp;quot;%x&amp;quot;, 13) D %U Unicode格式：U+1234，等同于 &amp;quot;U+%04X&amp;quot; Printf(&amp;quot;%U&amp;quot;, 0x4E2D) U+4E2D  浮点数和复数的组成部分（实部和虚部） 占位符 说明 举例 输出 %b 无小数部分的，指数为二的幂的科学计数法， 与 strconv.</description>
    </item>
    
    <item>
      <title>进制学习</title>
      <link>http://edcismybrother.github.io/decimal/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/decimal/</guid>
      <description>进制对应的英文 name 中文名 含义 举例（以十进制为标准，10的转换） binary 二进制 满2进1 1010 Octal 八进制 满8进1 12 Decimal 十进制 满10进1 10 Hex 十六进制 满16进1 a  进制转换在线工具
golang中进制之间的相互转换 首先看看go自带的包  &amp;ldquo;encoding/hex&amp;rdquo; &amp;ldquo;encoding/binary&amp;rdquo;
 重点分析 2、10、16进制之间的相互转换
hex 分析 func Encode(dst, src []byte) int { for i, v := range src { dst[i*2] = hextable[v&amp;gt;&amp;gt;4] dst[i*2+1] = hextable[v&amp;amp;0x0f] } return len(src) * 2 }  Encode函数将src目标字节数组，转换成16进制形式的dst字节数组，数组长度翻倍
原理：将原来用一个字节表示的内容，用两个字节来表示，所以返回的dst是src的两倍长度
将原字节右移4位，得到高位内容(ascii码)，放在第一个字节，原字节与0000 1111与,得到低位内容(ascii码)，放到第二字节
func Decode(dst, src []byte) (int, error) { var i int for i = 0; i &amp;lt; len(src)/2; i++ { a, ok := fromHexChar(src[i*2]) if !</description>
    </item>
    
    <item>
      <title>dep依赖管理</title>
      <link>http://edcismybrother.github.io/dep/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/dep/</guid>
      <description> 安装dep  go get -u github.com/golang/dep/cmd/dep
 dep基本使用  dep init 执行这个命令会将当前目录下所有文件import的第三方工具进行打包
 这个建议加上-v ,可以看日志
init是从网络上去下载对应的中间件，包很多的话，下载会非常慢
 dep init -gopath 会先去本地找对应的包，没有的话，再去网络上下载
dep ensure -update 依据Gopkg.toml文件的信息获取制定版本的依赖
 Gopkg.toml配置小结:
[[constraint]] name = &amp;quot;github.com/panjf2000/ants&amp;quot; version = &amp;quot;=3.6.0&amp;quot;  上述引用为例子:
&amp;quot;3.6.0&amp;quot; 约束使用 3.6.0 - 3.7.0 之间的最新版 &amp;quot;&amp;lt;=3.6.0&amp;quot; 约束使用最高版本为 3.6.0 &amp;quot;=3.6.0&amp;quot; 约束指定为3.6.0  </description>
    </item>
    
    <item>
      <title>aes加密</title>
      <link>http://edcismybrother.github.io/2018/09/25/aes/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/2018/09/25/aes/</guid>
      <description>aes加密详解</description>
    </item>
    
    <item>
      <title>xorm基本操作</title>
      <link>http://edcismybrother.github.io/2018/09/25/xorm/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/2018/09/25/xorm/</guid>
      <description> 学习链接 </description>
    </item>
    
    <item>
      <title>简单的tcp实例</title>
      <link>http://edcismybrother.github.io/2018/09/24/tcp/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/2018/09/24/tcp/</guid>
      <description>tcp服务器 开启对服务器ip以及端口的监听
lis, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:6666&amp;quot;) if err != nil { log.Fatalf(&amp;quot;failed to listen:%v&amp;quot;, err) }  用for循环从监听者处取发起拨号的连接
for { conn, err := lis.Accept() if err != nil { log.Fatalf(&amp;quot;failed to accept:%v&amp;quot;, err) continue } sendMessage(conn) time.Sleep(time.Second * 1) }  写两个函数用来收发消息
发消息:将需要发送的消息内容，通过相关的序列化操作，转化成字节流，将字节流通过write函数发送
func send(){ _,err := conn.Write([]byte(str)) if err != nil { log.Fatalf(&amp;quot;failed to write:%v&amp;quot;, err) } }  收消息:通过read函数将字节流读出来，然后通过相关的反序列化操作，得到想要的消息
func recv(){ b := make([]byte,1024) _,err := conn.</description>
    </item>
    
    <item>
      <title>markdown</title>
      <link>http://edcismybrother.github.io/2018/09/24/markdown/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/2018/09/24/markdown/</guid>
      <description> 英文学习链接 中文学习链接 </description>
    </item>
    
    <item>
      <title>submodule</title>
      <link>http://edcismybrother.github.io/2018/09/24/submodule/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/2018/09/24/submodule/</guid>
      <description> submodule常用命令  新增：在当前库中没有submodule子模块，可以通过 git submodule add remote 添加子模块 删除：
git rm -fr submodule 删除 `./git/config` 文件中的相关submodule 删除 `./git/submodule` 中相关的子模块  新环境中拉取库中的子模块：
初始化`git submodule init` 更新`git submodule update`  拉取所有子模块的最新代码
git submodule foreach &amp;ndash;recursive git pull origin master
 git submodule update检出项目的指定版本（HEAD），并不指向一个分支。头指针和分支未绑定，是分离状态。 需要强制绑定
git branch -f master HEAD git checkout master  相关网页
  </description>
    </item>
    
  </channel>
</rss>
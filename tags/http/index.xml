<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on 皮智文的小宝库</title>
    <link>http://edcismybrother.github.io/tags/http/</link>
    <description>Recent content in Http on 皮智文的小宝库</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <lastBuildDate>Tue, 30 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://edcismybrother.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>colly源码包分析</title>
      <link>http://edcismybrother.github.io/colly/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/colly/</guid>
      <description>基本用法  infos := make([]info, 0) c := colly.NewCollector() c.OnHTML(&amp;quot;.content div .rprt&amp;quot;, func(e *colly.HTMLElement) { title := e.ChildText(&amp;quot;.rslt p.title a&amp;quot;) author := e.ChildText(&amp;quot;.supp .desc&amp;quot;) message := e.ChildText(&amp;quot;.supp .details&amp;quot;) pmid := e.ChildText(&amp;quot;.aux .resc .rprtid dd&amp;quot;) id, _ := strconv.ParseInt(pmid, 10, 64) i := info{ title: strings.TrimRight(title, &amp;quot;.&amp;quot;), author: author, message: message, pmid: id, } infos = append(infos, i) }) c.OnRequest(func(req *colly.Request) { log.Println(&amp;quot;Visit:&amp;quot;, req.URL.String()) }) c.Post(&amp;quot;https://www.ncbi.nlm.nih.gov/pubmed&amp;quot;, map[string]string{ &amp;quot;term&amp;quot;: &amp;quot;kif15&amp;quot;, &amp;quot;p$a&amp;quot;: strconv.</description>
    </item>
    
    <item>
      <title>golang标准包分析---http</title>
      <link>http://edcismybrother.github.io/tcp/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://edcismybrother.github.io/tcp/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>服务端 服务端是用来接收连接的，因此需要一个监听的逻辑
// 函数ListenAndServe用来开启服务并且监听，而这个 // 函数的核心就是tcp连接，通过net.Listen(param1,param2)得到listener // 其中param1是连接类型，可以有tcp,tcp4,tcp6......,param2则是服务地址：ip:port // 返回的listener是一个interface{}类型 type Listener interface { // Accept waits for and returns the next connection to the listener. Accept() (Conn, error) // Close closes the listener. // Any blocked Accept operations will be unblocked and return errors. Close() error // Addr returns the listener&#39;s network address. Addr() Addr }  只要实现了Listener的三个函数的结构体，都能作为返回参数，以param1=tcp为例子，将会返回TCPListener // TCPListener is a TCP network listener. Clients should typically // use variables of type Listener instead of assuming TCP.</description>
    </item>
    
  </channel>
</rss>